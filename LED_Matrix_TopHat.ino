//#include <avr/pgmspace.h>
#include <FastLED.h>

//***********************************************
//************ JIM'S DEFINES ********************
//***********************************************

#define COLOR_ORDER GRB
#define CHIPSET     WS2811

#define LED_PIN  23
#define BRIGHTNESS 96

#define BLACK        0x000000
#define BLUE         0x000096
#define DARK_BLUE    0x000014
#define DARK_YELLOW  0x4B4B00
#define DARK_WHITE   0x323232
#define DARK_GREEN   0x003200
#define GREEN        0x005000
#define RED          0x640000

#define PINEAPPLE    0x000000//0x784A00 // 120 74 0
#define PINEAPPLE2   0x001400//0x9F6C00 // 159 108 0

const uint8_t kMatrixWidth = 64;
const uint8_t kMatrixHeight = 16;

#define NUM_LEDS (kMatrixWidth * kMatrixHeight)
CRGB leds[NUM_LEDS];

//***********************************************
//************* DEMO DEFINES ********************
//***********************************************

// coordinates for noisePaletteDemo (z refers to time)
static uint16_t x;
static uint16_t y;
static uint16_t z;
uint8_t gHue = 0; // rotating "base color" used by many of the patterns



//***********************************************
//*************** STORED IMAGES *****************
//***********************************************

const long pacman1_MEM[]        = {BLACK,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  BLACK,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  BLACK,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  BLACK,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  BLACK,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  BLACK,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  BLACK,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  BLACK,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK};
const long pacman2_MEM[]        = {}; 
const long pacman3_MEM[]        = {BLACK,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  BLACK,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  BLACK,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  BLACK,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK};
const long pacmanLeft1_MEM[]    = {BLACK,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  BLACK,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  BLACK,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  BLACK,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  BLACK,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  BLACK,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  BLACK,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  BLACK,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  DARK_YELLOW,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK};
const long pacmanLeft2_MEM[]    = {};
const long ghost1_MEM[]         = {};
const long ghost2_MEM[]         = {};
const long scaredGhost_MEM[]    = {BLACK,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_BLUE,    DARK_BLUE,    DARK_WHITE,   DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_BLUE,    DARK_BLUE,    DARK_WHITE,   DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_WHITE,   DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    BLACK,  BLACK,  BLACK,  DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_WHITE,   DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_WHITE,   DARK_WHITE,   DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    BLACK,  BLACK,  BLACK,  DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_WHITE,   DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_BLUE,  DARK_BLUE,  DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    BLACK,  BLACK,  BLACK,  BLACK,  DARK_BLUE,    DARK_BLUE,    DARK_WHITE,   DARK_BLUE,    DARK_BLUE,    DARK_BLUE,  DARK_BLUE,  DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    BLACK,  BLACK,  BLACK,  BLACK,  DARK_BLUE,    DARK_BLUE,    DARK_WHITE,   DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    BLACK,  BLACK,  DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_WHITE,   DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_WHITE,   DARK_WHITE,   DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    BLACK,  BLACK,  DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_WHITE,   DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_WHITE,   DARK_WHITE,   DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    BLACK,  BLACK,  BLACK,  BLACK,  DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_WHITE,   DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_BLUE,    DARK_BLUE,    DARK_WHITE,   DARK_BLUE,    DARK_BLUE,    DARK_BLUE,  DARK_BLUE,  DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_BLUE,    DARK_BLUE,    DARK_WHITE,   DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_BLUE,  DARK_BLUE,  DARK_BLUE,    DARK_BLUE,    BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    DARK_BLUE,    BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK};
const long strawberry_MEM[]     = {};
const long banana_MEM[]         = {};
const long cherry_MEM[]         = {};
const long pineapple_MEM[]      = {};
const long eye1_MEM[]           = {};
const long eye12_MEM[]          = { BLACK,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_BLUE,  DARK_BLUE,  DARK_BLUE,  DARK_BLUE,  DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_BLUE,  DARK_BLUE,  BLACK,  BLACK,  DARK_BLUE,  DARK_BLUE,  DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   BLACK,  BLACK,  BLACK,  BLACK,  DARK_BLUE,  DARK_BLUE,  BLACK,  BLACK,  DARK_BLUE,  DARK_BLUE,  DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   BLACK,  BLACK,  BLACK,  DARK_WHITE,   DARK_WHITE,   DARK_BLUE,  DARK_BLUE,  DARK_BLUE,  DARK_BLUE,  DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   BLACK,  BLACK,  DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_BLUE,  DARK_BLUE,  DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   BLACK,  BLACK,  DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   BLACK,  BLACK,  DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   BLACK,  BLACK,  BLACK,  DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   BLACK,  BLACK,  BLACK,  BLACK,  DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK};
const long eye2_MEM[]           = { BLACK,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_BLUE,  DARK_BLUE,  DARK_BLUE,  DARK_BLUE,  DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_BLUE,  DARK_BLUE,  BLACK,  BLACK,  DARK_BLUE,  DARK_BLUE,  DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_WHITE,   DARK_BLUE,  DARK_BLUE,  BLACK,  BLACK,  DARK_BLUE,  DARK_BLUE,  DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   BLACK,  BLACK,  BLACK,  BLACK,  DARK_WHITE,   DARK_WHITE,   DARK_BLUE,  DARK_BLUE,  DARK_BLUE,  DARK_BLUE,  DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   BLACK,  BLACK,  BLACK,  DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_BLUE,  DARK_BLUE,  DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   BLACK,  BLACK,  DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   BLACK,  BLACK,  DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   BLACK,  BLACK,  DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   BLACK,  BLACK,  BLACK,  DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   BLACK,  BLACK,  BLACK,  BLACK,  DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK};
const long eye23_MEM[]          = {};
const long eye3_MEM[]           = {};
const long eye_halfclosed_MEM[] = { BLACK,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_WHITE,   DARK_WHITE,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_BLUE,  DARK_BLUE,  DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_WHITE,   DARK_WHITE,   DARK_BLUE,  DARK_BLUE,  DARK_BLUE,  DARK_BLUE,  DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_WHITE,   DARK_BLUE,  DARK_BLUE,  BLACK,  DARK_WHITE,   DARK_BLUE,  DARK_BLUE,  DARK_WHITE,   DARK_WHITE,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_WHITE,   DARK_BLUE,  DARK_BLUE,  BLACK,  BLACK,  DARK_BLUE,  DARK_BLUE,  DARK_WHITE,   DARK_WHITE,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_WHITE,   DARK_WHITE,   DARK_BLUE,  DARK_BLUE,  DARK_BLUE,  DARK_BLUE,  DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_BLUE,  DARK_BLUE,  DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   DARK_WHITE,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_WHITE,   DARK_WHITE,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK};
const long eye_fullclosed_MEM[] = {};
const long sineWave_MEM[]       = { BLACK, DARK_GREEN, BLACK, BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_GREEN,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_GREEN,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_GREEN,   DARK_GREEN,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_GREEN,   DARK_GREEN,   DARK_GREEN,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_GREEN,   DARK_GREEN,   DARK_GREEN,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_GREEN,   DARK_GREEN,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_GREEN,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_GREEN,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_GREEN,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_GREEN,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_GREEN,   DARK_GREEN,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_GREEN,   DARK_GREEN,   DARK_GREEN,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_GREEN,   DARK_GREEN,   DARK_GREEN,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_GREEN,   DARK_GREEN,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  DARK_GREEN,   BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK,  BLACK};
const long shamrock_MEM[]       = {};
const long rose_MEM[]           = {};




//************************************************
//*************** MAIN LOOP **********************
//************************************************

void loop()
{

  //####### ENGLAND VS IRELAND #######
  scrollShamrockRose(3);
  
  //####### SHINDIG LOOP ########
  sineWaveScroll(5);
  clearAndPause(5000);

  juggle(500);
  clearAndPause(5000);
  
  scrollFruit(5);                         //number of full cycles
  clearAndPause(5000);
    
  eyeball(5);
  clearAndPause(5000);
  
  XYMatrixDemo(400);                      //400 is around 10 sec
  clearAndPause(5000);
  
  scrollPacMan(3);
  scaredPacMan(1);
  scrollPacMan(3);
  scaredPacMan(1);      
  clearAndPause(5000);
  
  bpm(500);

}



//************************************************
//*************** FUNCTIONS***********************
//************************************************

void sineWaveScroll(int numCycles)
{
  backgroundFill(BLACK);
  sineWave();
  shiftLEDs(16);
  sineWave();
  shiftLEDs(16);
  sineWave();
  shiftLEDs(16);
  sineWave();
  boustrophedonise();
  FastLED.show();

  for(int i=0; i<numCycles; i++){
    scroll(-1, 20);                         // scrollStep, scrollRate
  }
}





void scrollShamrockRose(int numCycles)
{
  backgroundFill(BLACK);
  shamrock();
  shiftLEDs(16);
  rose();
  shiftLEDs(16);
  shamrock();
  shiftLEDs(16);
  rose();
  boustrophedonise();
  FastLED.show();

  for(int i=0; i<numCycles; i++){
    scroll(-1, 50);                         // scrollStep, scrollRate
  }
}





void scrollFruit(int numCycles)
{
  backgroundFill(DARK_BLUE);
  banana();
  shiftLEDs(16);
  cherry();
  shiftLEDs(16);
  pineapple();
  shiftLEDs(14);
  strawberry();
  boustrophedonise();
  FastLED.show();

  for(int i=0; i<numCycles; i++){
    scroll(-1, 50);                         // scrollStep, scrollRate
  }
}




void clearAndPause(int delayTime){
  // set colour to black and reset brightness
  backgroundFill(BLACK);
  FastLED.show();
  delay(delayTime);  
}




void eyeball(int numCycles){
  for (int i=0; i< numCycles; i++){

    backgroundFill(BLACK);

    //blink
    eye1();            shiftLEDs(16); eye1();            shiftLEDs(16); eye1();            shiftLEDs(16); eye1();            boustroShow(); delay(1000);
    eye_halfclosed();  shiftLEDs(16); eye_halfclosed();  shiftLEDs(16); eye_halfclosed();  shiftLEDs(16); eye_halfclosed();  boustroShow(); delay(100);
    eye_fullclosed();  shiftLEDs(16); eye_fullclosed();  shiftLEDs(16); eye_fullclosed();  shiftLEDs(16); eye_fullclosed();  boustroShow(); delay(100);  
    eye_halfclosed();  shiftLEDs(16); eye_halfclosed();  shiftLEDs(16); eye_halfclosed();  shiftLEDs(16); eye_halfclosed();  boustroShow(); delay(100);
    eye1();            shiftLEDs(16); eye1();            shiftLEDs(16); eye1();            shiftLEDs(16); eye1();            boustroShow(); delay(1000);
    //look left
    eye1();            shiftLEDs(16); eye1();            shiftLEDs(16); eye1();            shiftLEDs(16); eye1();            boustroShow(); delay(50);
    eye12();           shiftLEDs(16); eye12();           shiftLEDs(16); eye12();           shiftLEDs(16); eye12();           boustroShow(); delay(50);
    eye2();            shiftLEDs(16); eye2();            shiftLEDs(16); eye2();            shiftLEDs(16); eye2();            boustroShow(); delay(1000);
    //look right
    eye12();           shiftLEDs(16); eye12();           shiftLEDs(16); eye12();           shiftLEDs(16); eye12();           boustroShow(); delay(50);
    eye1();            shiftLEDs(16); eye1();            shiftLEDs(16); eye1();            shiftLEDs(16); eye1();            boustroShow(); delay(50);
    eye23();           shiftLEDs(16); eye23();           shiftLEDs(16); eye23();           shiftLEDs(16); eye23();           boustroShow(); delay(50);
    eye3();            shiftLEDs(16); eye3();            shiftLEDs(16); eye3();            shiftLEDs(16); eye3();            boustroShow(); delay(1000);
    //look centre
    eye23();           shiftLEDs(16); eye23();           shiftLEDs(16); eye23();           shiftLEDs(16); eye23();           boustroShow(); delay(50);
    eye1();            shiftLEDs(16); eye1();            shiftLEDs(16); eye1();            shiftLEDs(16); eye1();            boustroShow(); delay(500);
    
  }
}


void eyeBlink(){
//    backgroundFill(BLACK);

}


void scrollPacMan(int numCycles)
{
    int counter = 1;
    int pacSpeed = 2;

  for(int j=0; j<numCycles; j++){

    for(int i=0; i<kMatrixWidth/pacSpeed; i++){

    backgroundFill(BLACK);

      if(counter==1){
        pacman1();
        shiftLEDs(-16);
        ghost1(RED);
        shiftLEDs(-16);
        ghost2(DARK_GREEN);
      }
      if(counter==2){
        pacman2();
        shiftLEDs(-16);
        ghost1(RED);
        shiftLEDs(-16);
        ghost2(DARK_GREEN);
      }
      if(counter==3){
        pacman1();
        shiftLEDs(-16);
        ghost2(RED);
        shiftLEDs(-16);
        ghost1(DARK_GREEN);
      }
      if(counter==4){
        pacman3();
        shiftLEDs(-16);
        ghost2(RED);
        shiftLEDs(-16);
        ghost1(DARK_GREEN);
      }
      
      counter++;
      if(counter > 4){counter = 1;}
      
      shiftLEDs(-pacSpeed*i);
      boustrophedonise();
      FastLED.show();
      delay(50);
    }
  }
}




void scaredPacMan(int numCycles)
{
    int counter = 1;
    int pacSpeed = 2;

  for(int j=0; j<numCycles; j++){

    for(int i=0; i<kMatrixWidth/pacSpeed; i++){

    backgroundFill(BLACK);

      if(counter==1){
        pacmanLeft1();
        shiftLEDs(-16);
        scaredGhost();
        shiftLEDs(-16);
        scaredGhost();
      }
      if(counter==2){
        pacman2();
        shiftLEDs(-16);
        scaredGhost();
        shiftLEDs(-16);
        scaredGhost();
      }
      if(counter==3){
        pacmanLeft1();
        shiftLEDs(-16);
        scaredGhost();
        shiftLEDs(-16);
        scaredGhost();
      }
      if(counter==4){
        pacmanLeft2();
        shiftLEDs(-16);
        scaredGhost();
        shiftLEDs(-16);
        scaredGhost();
      }
      
      counter++;
      if(counter > 4){counter = 1;}
      
      shiftLEDs(pacSpeed*i);
      boustrophedonise();
      FastLED.show();
      delay(50);
    }
  }
}





void incrementLEDtest()
{
  ////Scroll through all Leds; 0 -> NUM_LEDS
  for (int i=0; i<NUM_LEDS; i++){
    leds[i] = BLUE;
    FastLED.show();
    delay(20);
  }
  FastLED.clear();
}





void boustroShow() {      // shows pixels but boustrophedonises before and after
  boustrophedonise();
  FastLED.show();
  boustrophedonise();
}





void boustrophedonise() {
  int col;
  int row;
  
  for (col=0; col<kMatrixWidth; col+=2) {
    for (row = 0; row < 8; row++) {
      swapPixels(col, row, 15 - row);
    }
  }
}





void swapPixels(int col, int row1, int row2) {
  int i1 = (col * 16) + row1;
  int i2 = (col * 16) + row2;

  CRGB temp;
  temp = leds[i1];
  leds[i1] = leds[i2];
  leds[i2] = temp;
  
}





void shiftLEDs(int shiftLEDsInput) {  
  // Reads in led array, shifts leds by specified number of pixels, returns shifted array
  
    CRGB tempArray[NUM_LEDS];
    int pixelCol;
    int rowsRemaining;
    int shiftBy;
    int newPixelNo;

    int oddColumn = (shiftLEDsInput%2 == 0) ? 0 : 1;       // sets oddcolumn to true if shiftLEDsInput is wanting us to shift by an odd number of columns
  
    // copy leds[] to tempArray[]
    for (int i=0; i<NUM_LEDS; i++){ 
      tempArray[i] = leds[i];
    }
   
    // find out which column each pixel is in
    for (int pixelNo = 0; pixelNo < NUM_LEDS; pixelNo++){                          // for each pixel

      // calculate number of leds remaining in current column
      rowsRemaining = (kMatrixHeight - 1) - ((pixelNo + kMatrixHeight)%kMatrixHeight);
      
      //determine whether we want to shift by an odd or even number of columns
      shiftBy = ((shiftLEDsInput - oddColumn) * kMatrixHeight)     +     (oddColumn * ( (2 * rowsRemaining) + 1 ));
                  // handles even column shifts                       //handles the addition of an odd column shift
      
      // calculate position of new pixel
      newPixelNo = pixelNo + shiftBy;


      // wrap pixels round edge of matrix
      if (newPixelNo >= NUM_LEDS){                                                   
        newPixelNo -= NUM_LEDS;
      }
      if (newPixelNo < 0){                                                   
        newPixelNo += NUM_LEDS;
      }
      
      leds[pixelNo] = tempArray[newPixelNo];                                       // update leds array fom temp array
  
    }                                                                              // move on to next pixel
}




void scroll(int scrollStep, int scrollRate){
  // scroll all values across horizontally for entire width of matrix
  for (int i=0; i<kMatrixWidth; i++){
    shiftLEDs(scrollStep);
    FastLED.show();
    delay(scrollRate);
  }
}





void backgroundFill(CRGB colour){
  for (int i=0; i<NUM_LEDS; i++){
  leds[i] = colour;
  }
}








//************************************************
//***************** DEMOS ************************
//************************************************
uint16_t XY( uint8_t x, uint8_t y)
{ // demo copied from XYMatrix
  uint16_t i;
  
  if( y & 0x01) {
    // Odd rows run backwards
    uint8_t reverseX = (kMatrixHeight - 1) - x;
    i = (y * kMatrixHeight) + reverseX;
  } else {
    // Even rows run forwards
    i = (y * kMatrixHeight) + x;
  }
  
  return i;
}

void DrawOneFrame( byte startHue8, int8_t yHueDelta8, int8_t xHueDelta8)
{
  byte lineStartHue = startHue8;
  for( byte y = 0; y < kMatrixWidth; y++) {
    lineStartHue += yHueDelta8;
    byte pixelHue = lineStartHue;      
    for( byte x = 0; x < kMatrixHeight; x++) {
      pixelHue += xHueDelta8;
      leds[ XY(x, y)]  = CHSV( pixelHue, 255, 255);
    }
  }
}

void XYMatrixDemo(int numCycles)
{
  FastLED.setBrightness(16);
  for (int i=0; i<numCycles; i++){
      uint32_t ms = millis();
      int32_t yHueDelta32 = ((int32_t)cos16( ms * (27/1) ) * (350 / kMatrixHeight));
      int32_t xHueDelta32 = ((int32_t)cos16( ms * (39/1) ) * (310 / kMatrixWidth));
      DrawOneFrame( ms / 65536, yHueDelta32 / 32768, xHueDelta32 / 32768);
      FastLED.show();
      delay(20);
  }
  FastLED.setBrightness(BRIGHTNESS);
}


void bpm(int numCycles)
{
  FastLED.setBrightness(16);
  for (int i=0; i<numCycles; i++){
    // colored stripes pulsing at a defined Beats-Per-Minute (BPM)
    uint8_t BeatsPerMinute = 62;
    CRGBPalette16 palette = PartyColors_p;
    uint8_t beat = beatsin8( BeatsPerMinute, 64, 255);
    for( int i = 0; i < NUM_LEDS; i++) { //9948
      leds[i] = ColorFromPalette(palette, gHue+(i*2), beat-gHue+(i*10));
    }
    // send the 'leds' array out to the actual LED strip
    FastLED.show();  
    // insert a delay to keep the framerate modest
    FastLED.delay(10); 
  
    // do some periodic updates
    EVERY_N_MILLISECONDS( 20 ) { gHue++; } // slowly cycle the "base color" through the rainbow
  }
  FastLED.setBrightness(BRIGHTNESS);
}

void juggle(int numCycles) {
  FastLED.setBrightness(16);
  for (int i=0; i<numCycles; i++){
    // eight colored dots, weaving in and out of sync with each other
    fadeToBlackBy( leds, NUM_LEDS, 20);
    byte dothue = 0;
    for( int i = 0; i < 8; i++) {
      leds[beatsin16( i+7, 0, NUM_LEDS-1 )] |= CHSV(dothue, 200, 255);
      dothue += 32;
    }
    // send the 'leds' array out to the actual LED strip
    FastLED.show();  
    // insert a delay to keep the framerate modest
    FastLED.delay(10); 
  
    // do some periodic updates
    EVERY_N_MILLISECONDS( 20 ) { gHue++; } // slowly cycle the "base color" through the rainbow
  }
  FastLED.setBrightness(BRIGHTNESS);
}



//************************************************
//************ IMAGE READ FUNCTIONS **************
//************************************************

void eye1()  {
  for (int i = 0; i<256; i++) {
    leds[i] = eye1_MEM[i];
  }
}


void eye12()  {
  for (int i = 0; i<256; i++) {
    leds[i] = eye12_MEM[i];
  }
}


void eye2()  {
  for (int i = 0; i<256; i++) {
    leds[i] = eye2_MEM[i];
  }
}


void eye23()  {
  for (int i = 0; i<256; i++) {
    leds[i] = eye23_MEM[i];
  }
}


void eye3()  {
  for (int i = 0; i<256; i++) {
    leds[i] = eye3_MEM[i];
  }
}


void eye_fullclosed()  {
  for (int i = 0; i<256; i++) {
    leds[i] = eye_fullclosed_MEM[i];
  }
}


void eye_halfclosed()  {
  for (int i = 0; i<256; i++) {
    leds[i] = eye_halfclosed_MEM[i];
  }
}


void pacman1() {
  for (int i = 0; i<256; i++) {
    leds[i] = pacman1_MEM[i];
  }
}


void pacman2(){
    for (int i = 0; i<256; i++) {
    leds[i] = pacman2_MEM[i];
  }
}


void pacman3(){
    for (int i = 0; i<256; i++) {
    leds[i] = pacman3_MEM[i];
  }
}


void pacmanLeft1()  {
  for (int i = 0; i<256; i++) {
    leds[i] = pacmanLeft1_MEM[i];
  }
}


void pacmanLeft2()  {
  for (int i = 0; i<256; i++) {
    leds[i] = pacmanLeft2_MEM[i];
  }
}


void ghost1(long ghostColour){
   for (int i = 0; i<256; i++) {
    long colourVal = ghost1_MEM[i];
    if (colourVal == RED){
      colourVal = ghostColour;
    }
    leds[i] = colourVal;
  }
}


void ghost2(long ghostColour){
   for (int i = 0; i<256; i++) {
    long colourVal = ghost2_MEM[i];
    if (colourVal == RED){
      colourVal = ghostColour;
    }
    leds[i] = colourVal;
  }
}


void scaredGhost()  {
  for (int i = 0; i<256; i++) {
    leds[i] = scaredGhost_MEM[i];
  }
}


void strawberry()  {
  for (int i = 0; i<256; i++) {
    leds[i] = strawberry_MEM[i];
  }
}


void banana()  {
  for (int i = 0; i<256; i++) {
    leds[i] = banana_MEM[i];
  }
}


void cherry()  {
  for (int i = 0; i<256; i++) {
    leds[i] = cherry_MEM[i];
  }
}


void pineapple()  {
  for (int i = 0; i<256; i++) {
    leds[i] = pineapple_MEM[i];
  }
}


void sineWave()  {
  for (int i = 0; i<256; i++) {
    leds[i] = sineWave_MEM[i];
  }
}


void shamrock()  {
  for (int i = 0; i<256; i++) {
    leds[i] = shamrock_MEM[i];
  }
}


void rose()  {
  for (int i = 0; i<256; i++) {
    leds[i] = rose_MEM[i];
  }
}



//************************************************
//******************* SETUP **********************
//************************************************

void setup() {
  Serial.begin(9600);
  FastLED.addLeds<CHIPSET, LED_PIN, COLOR_ORDER>(leds, NUM_LEDS).setCorrection(TypicalSMD5050);
  FastLED.setBrightness( BRIGHTNESS );

  // Initialize NoisePaletteDemo coordinates to some random values
  x = random16();
  y = random16();
  z = random16();

  // set all leds to off
  FastLED.clear(1);
  delay(1000);
  
}
